@startuml Retail Management System - Exception Scenarios

!theme plain
skinparam sequenceMessageAlignment left
skinparam sequenceArrowThickness 2
skinparam sequenceLifeLineBackgroundColor #FFE6E6
skinparam sequenceActorBackgroundColor #FFE6CC
skinparam sequenceGroupBackgroundColor #FFF0F0
skinparam sequenceGroupBorderColor #DC143C
skinparam sequenceNoteBackgroundColor #FFE4E1

title Retail Management System - Exception Scenarios

actor Customer
participant "Web Browser" as Browser
participant "Flask App" as Flask
participant "Cart Manager" as Cart
participant "Database" as DB
participant "Product" as Product
participant "Sale" as Sale
participant "Payment" as Payment
participant "FailedPaymentLog" as Log

== A1. Empty Cart Checkout ==
Customer -> Browser: Click "Complete Purchase" with empty cart
Browser -> Flask: POST /checkout
Flask -> Cart: get_cart_items(user_id)
Cart -> DB: Query cart data
DB --> Cart: Return empty cart
Cart --> Flask: Return empty cart

Flask --> Browser: Error message "Cart is empty"
Browser --> Customer: Display "Cannot complete purchase: Your cart is empty"

== A2. Insufficient Stock During Checkout ==
Customer -> Browser: Click "Complete Purchase"
Browser -> Flask: POST /checkout
Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return cart with items

Flask -> DB: Query Products with FOR UPDATE lock
DB --> Flask: Return locked Products

loop For each cart item
    Flask -> Product: Check stock vs quantity
    alt Stock insufficient
        Product --> Flask: Stock < quantity required
        note right: Only 2 in stock, but cart has 5
    end
end

Flask -> DB: Rollback transaction
DB --> Flask: Transaction rolled back

Flask -> Sale: Convert Sale back to cart status
Sale -> DB: Update Sale status to 'cart'
DB --> Sale: Success

Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return updated cart
Flask --> Browser: Error message with stock conflict
Browser --> Customer: Display "Checkout failed: stock changed. Only X left"

== A3. Payment Failure Scenarios ==
Customer -> Browser: Submit payment details
Browser -> Flask: POST /checkout
note right: {payment_method: "Card", card_number: "1111111111111111"}

Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return cart data

Flask -> DB: Query Products with FOR UPDATE lock
DB --> Flask: Return locked Products

Flask -> Sale: Convert cart Sale to pending Sale
Sale -> DB: Update Sale status to 'pending'
DB --> Sale: Success

Flask -> Payment: Create Card payment
Payment -> DB: Insert Card record
DB --> Payment: Success

Flask -> Payment: authorized()
alt Card validation fails
    Payment --> Flask: (false, "Invalid Card Number")
else Card expired
    Payment --> Flask: (false, "Card Expired")
else Card declined (contains "1111")
    Payment --> Flask: (false, "Card Declined by issuer")
else Random processor decline
    Payment --> Flask: (false, "Payment declined by processor")
else Cash handling error
    Payment --> Flask: (false, "Cash handling error at terminal")
end

== Payment Failure Handling ==
Flask -> Sale: Update status to 'failed'
Sale -> DB: Update Sale record
DB --> Sale: Success

Flask -> Payment: Update status to 'failed'
Payment -> DB: Update Payment record
DB --> Payment: Success

Flask -> Log: Create FailedPaymentLog
note right: userID, attempt_date, amount, payment_method, reason
Log -> DB: Insert FailedPaymentLog record
DB --> Log: Return log with logID
Log --> Flask: Return log with ID

Flask -> Sale: Convert Sale back to cart status
Sale -> DB: Update Sale status to 'cart'
DB --> Sale: Success

Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return preserved cart
Flask --> Browser: Error message with log ID
Browser --> Customer: Display "Payment failed: [reason]. Failed payment attempt #[logID]"

== A4. Stock Conflict During Final Check ==
note over Customer, Log: Payment authorized, but stock changed during transaction

Flask -> Payment: authorized()
Payment --> Flask: (true, "Approved")

loop For each cart item - Final check
    Flask -> Product: Check stock vs quantity
    alt Stock changed during transaction
        Product --> Flask: Stock < quantity required
        note right: Another user purchased items
    end
end

Flask -> DB: Rollback transaction
DB --> Flask: Transaction rolled back

Flask -> Sale: Convert Sale back to cart status
Sale -> DB: Update Sale status to 'cart'
DB --> Sale: Success

Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return updated cart
Flask --> Browser: Stock conflict error
Browser --> Customer: Display "Checkout failed: stock changed. Only X left"

== A5. Invalid Payment Data ==
Customer -> Browser: Submit invalid card data
Browser -> Flask: POST /checkout
note right: {card_number: "123", card_exp_date: "invalid"}

Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return cart data

Flask -> Sale: Convert cart Sale to pending Sale
Sale -> DB: Update Sale status to 'pending'
DB --> Sale: Success

alt Missing card data
    Flask -> DB: Rollback transaction
    Flask --> Browser: "Card number and expiry date are required"
else Invalid card number format
    Flask -> DB: Rollback transaction
    Flask --> Browser: "Invalid Card Number (must be 15-19 digits)"
else Invalid expiry format
    Flask -> DB: Rollback transaction
    Flask --> Browser: "Invalid Expiry Date Format"
else Card expired
    Flask -> DB: Rollback transaction
    Flask --> Browser: "Card Expired"
end

Flask -> Sale: Convert Sale back to cart status
Sale -> DB: Update Sale status to 'cart'
DB --> Sale: Success

Browser --> Customer: Display validation error

== A6. System Exception ==
Customer -> Browser: Submit checkout request
Browser -> Flask: POST /checkout

Flask -> Cart: get_cart_items(user_id)
Cart --> Flask: Return cart data

Flask -> DB: Query Products
alt Database connection error
    DB --> Flask: DatabaseException
else System error
    Flask -> Flask: Internal system error
end

Flask -> DB: Rollback transaction
DB --> Flask: Transaction rolled back

Flask --> Browser: "Checkout error: [error details]"
Browser --> Customer: Display system error message

@enduml
